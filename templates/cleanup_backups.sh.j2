#!/bin/bash

# PostgreSQL Backup Cleanup Script
# Generated by Ansible

set -e

# Configuration
BACKUP_DIR="{{ backup_path }}"
RETENTION_DAYS="{{ backup_retention_days }}"
LOG_FILE="${BACKUP_DIR}/backup.log"

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "${LOG_FILE}"
}

log_message "Starting backup cleanup process..."

# Check if backup directory exists
if [ ! -d "${BACKUP_DIR}" ]; then
    log_message "Warning: Backup directory ${BACKUP_DIR} does not exist"
    exit 0
fi

# Find and remove old backup files
OLD_BACKUPS=$(find "${BACKUP_DIR}" -name "postgresql_backup_*.sql.gz" -type f -mtime +${RETENTION_DAYS} 2>/dev/null || true)

if [ -n "${OLD_BACKUPS}" ]; then
    log_message "Found old backups to remove (older than ${RETENTION_DAYS} days):"
    echo "${OLD_BACKUPS}" | while read -r backup_file; do
        if [ -f "${backup_file}" ]; then
            log_message "Removing: $(basename "${backup_file}")"
            rm -f "${backup_file}"
        fi
    done
    log_message "Cleanup completed successfully"
else
    log_message "No old backups found to remove"
fi

# Show current backup status
CURRENT_BACKUPS=$(find "${BACKUP_DIR}" -name "postgresql_backup_*.sql.gz" -type f 2>/dev/null | wc -l || echo "0")
log_message "Current number of backup files: ${CURRENT_BACKUPS}"

# Calculate total backup size
if command -v du >/dev/null 2>&1; then
    TOTAL_SIZE=$(du -sh "${BACKUP_DIR}" 2>/dev/null | cut -f1 || echo "unknown")
    log_message "Total backup directory size: ${TOTAL_SIZE}"
fi

log_message "Backup cleanup process completed."
